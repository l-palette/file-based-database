from pathlib import Path
from typing import List
from faker import Faker
import random
import logging
import re
import time
import socket
import os
from contextlib import contextmanager
import shutil
from datetime import datetime
import threading

FILENAME = "home_library.txt"

HEADERS = [
    "id",
    "name",
    "year",
    "authors",
    "genres",
    "width",
    "height",
    "book_type",
    "source",
    "date_added",
    "date_read",
    "rating",
]

regex_schema = {
    "name": r"(?!.*([\s])\1)[–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s]{1,100}",
    "authors": r"(?!.*([\s,])\1)[–ê-–Ø–∞-—è–Å—ëA-Za-z\s,]{1,130}",
    "genres": r"^(?!.*([\s,])\1)[–ê-–Ø–∞-—è–Å—ëA-Za-z\s,]{1,100}",
    "year": r"\d{4}",
    "width": r"\d+(\.\d+)?",
    "height": r"\d+(\.\d+)?",
    "book_type": r"–º—è–≥–∫–∏–π|—Ç–≤–µ—Ä–¥—ã–π",
    "source": r"–ø–æ–∫—É–ø–∫–∞|–ø–æ–¥–∞—Ä–æ–∫|–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ",
    "date_added": r"\d{2}-\d{2}-\d{4}",
    "date_read": r"\d{2}-\d{2}-\d{4}",
    "rating": r"([1-9]|10)/10 - [–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s\,\.\!\?]{1,200}",
}

library = """


 -                   @-                          @-                   %
   -                -           @@@@@@@            @                @  
    @-            -          @@@@@@ @@@@@@           @            @-   
      @         +        @@@@@@@       @@@@@@@         =         -     
          @@          @@@@@@@             @@@@@@@          @@          
        @@@@@@     @@@@@@       @@@@@@@       @@@@@@     @@@@@@        
       @@@@@@@ @@@@@@@        @@@@   @@@@        @@@@@@@@@@@@@@        
         @@@@@@@@@            @@@     @@@            @@@@@@@@@         
        @@@@@@@@-             @@@     @@@              @@@@@@@@ *      
     @@@@@@      @             @@@@@@@@@              -     @@@@@@-    
   @@@@@           *             @@@@@              -          @@@@ -  
 @- @@@              -                            #             @@@  @-
-   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    
        @@@      @@@   @@@     @@@   @@@     @@@   @@@      @@@        
        @@@@@@@@@@@@   @@@@@@@@@@@   @@@@@@@@@@@   @@@@@@@@@@@@        
         @@@@@@@@@@    @@@@@@@@@@@   @@@@@@@@@@@    @@@@@@@@@@         
          @@@   @@@     @@@   @@@     @@@- =@@@     @@@   @@@          
          @@@   @@@     @@@   @@@    @@@@+= @@@     @@@   @@@          
          @@@   @@@     @@@   @@@  @*@@@@   @@@     @@@   @@@          
          @@@   @@@     @@@   @@@ -* -@@@   @@@     @@@   @@@          
          @@@   @@@     @@@   @@@--@- @@@   @@@     @@@   @@@          
          @@@   @@@     @@@   @@@ +@  @@@   @@@     @@@   @@@          
          @@@   @@@     @@@ @-@@@     @@@-  @@@     @@@   @@@          
          @@@   @@@     @@@-@-@@@     @@@  -@@@     @@@   @@@          
          @@@   @@@     @@@ *-@@@     @@@   @@@     @@@   @@@          
          @@@   @@@     @@@   @@@     @@@   @@@=    @@@   @@@          
          @@@   @@@    -@@@   @@@     @@@   @@@ @   @@@   @@@          
 -        @@@   @@@  =  @@@   @@@     @@@   @@@   = @@@   @@@         @
   -      @@@   @@@@    @@@   @@@     @@@   @@@     *@@   @@@       @= 
    @=    @@@   @@@     @@@   @@@     @@@   @@@     @@@   @@@      -   
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-     
      @@@ @@                                               @@ @@@      
   @@@@@@@@@@@                                           @@@@@@@@@@@   
   @@@@@@@@@@@                                           @@@@@@@@@@@   
   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   
   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   
     -           @                                    -           @-   
   -               =                                +               @  
 =                   -                            @                   *

"""

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s]: %(message)s"
)

fake = Faker("ru_RU")

genres_list = [
    "–§—ç–Ω—Ç–µ–∑–∏",
    "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–î–µ—Ç–µ–∫—Ç–∏–≤",
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
    "–£–∂–∞—Å—ã",
    "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π",
    "–ù–∞—É—á–Ω—ã–π",
    "–ú–∏—Å—Ç–∏–∫–∞",
    "–ö–æ–º–µ–¥–∏—è",
    "–¢—Ä–∏–ª–ª–µ—Ä",
    "–î—Ä–∞–º–∞",
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω",
    "–°–∫–∞–∑–∫–∞",
    "–ü–æ—ç–∑–∏—è",
    "–ö–ª–∞—Å—Å–∏–∫–∞",
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–∑–∞",
    "–§–∏–ª–æ—Å–æ—Ñ–∏—è",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
    "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–ú–∏—Ñ–æ–ª–æ–≥–∏—è",
    "–°–ø–æ—Ä—Ç",
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ê–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
]


@contextmanager
def file_lock(filename, timeout=0.1):
    lockfile = Path(f"{filename}.lock")
    thread_name = threading.current_thread().name
    logging.info(f"[{thread_name}] –ü—ã—Ç–∞—é—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...")

    start_time = time.time()
    while True:
        try:
            lockfile.touch(exist_ok=False)
            logging.info(f"[{thread_name}] ‚úÖ –ó–∞—Ö–≤–∞—Ç–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É!")
            break
        except FileExistsError:
            if time.time() - start_time > timeout:
                logging.error(f"[{thread_name}] ‚ùå –ù–µ —É—Å–ø–µ–ª –∑–∞ {timeout} —Å–µ–∫!")
                raise TimeoutError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
            time.sleep(0.01)

    try:
        yield
    finally:
        lockfile.unlink()
        logging.info(f"[{thread_name}] üîì –û—Å–≤–æ–±–æ–¥–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")


def create_backup():
    backup_dir = Path("backups")
    backup_dir.mkdir(exist_ok=True)
    backups = list(backup_dir.glob("library_backup_*.txt"))
    if len(backups) >= 5:
        oldest_backup = min(backups, key=os.path.getmtime)
        oldest_backup.unlink()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"library_backup_{timestamp}.txt"
    shutil.copy2(FILENAME, backup_file)
    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")


def recover_from_backup():
    backup_dir = Path("backups")
    if not backup_dir.exists():
        return False
    
    backups = sorted(backup_dir.glob("library_backup_*.txt"), key=os.path.getmtime)
    if backups:
        latest_backup = backups[-1]
        shutil.copy2(latest_backup, FILENAME)
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {latest_backup}")
        return True
    return False


def validate_regex(field: str, value) -> None:
    if not re.fullmatch(regex_schema[field], str(value)):
        raise ValueError(
            f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é {regex_schema[field]}"
        )


def validate_year(year) -> None:
    validate_regex("year", year)
    if int(year) > datetime.now().year:
        raise ValueError("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞")
    if int(year) < 1500:
        raise ValueError("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—å—à–µ 1500")



def validate_width(width) -> None:
    validate_regex("width", width)
    if float(width) > 1000:
        raise ValueError("–®–∏—Ä–∏–Ω–∞ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1 –º–µ—Ç—Ä–∞")
    elif float(width) <= 0:
        raise ValueError("–®–∏—Ä–∏–Ω–∞ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0")


def validate_height(height) -> None:
    validate_regex("height", height)
    if float(height) > 1000:
        raise ValueError("–í—ã—Å–æ—Ç–∞ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1 –º–µ—Ç—Ä–∞")
    elif float(height) <= 0:
        raise ValueError("–í—ã—Å–æ—Ç–∞ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0")


def validate_date_added(date_added, year) -> None:
    validate_regex("date_added", date_added)
    date_added_datetime = datetime.strptime(date_added, "%d-%m-%Y")
    if date_added_datetime >= datetime.now():
        raise ValueError("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã")
    if date_added_datetime.year < int(year):
        raise ValueError("–ì–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è")


def validate_date_read(date_read, date_added) -> None:
    validate_regex("date_read", date_read)
    if date_read:
        date_added_datetime = datetime.strptime(date_added, "%d-%m-%Y")
        date_read_datetime = datetime.strptime(date_read, "%d-%m-%Y")
        if date_read_datetime < date_added_datetime:
            raise ValueError("–î–∞—Ç–∞ —á—Ç–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")


def dict_to_line(book: dict) -> str:
    return "|".join(str(book[header]) for header in HEADERS)


def line_to_dict(line: str) -> dict:
    parts = line.strip().split("|")
    return {
        "id": parts[0],
        "name": parts[1],
        "year": parts[2],
        "authors": parts[3],
        "genres": parts[4],
        "width": parts[5],
        "height": parts[6],
        "book_type": parts[7],
        "source": parts[8],
        "date_added": parts[9],
        "date_read": parts[10],
        "rating": parts[11],
    }


def authors_set():
    authors = set()
    while len(authors) < 100:
        authors.add(fake.name())
    return authors


# SINGLE BOOK
def generate_valid_book(authors_list, genres_list) -> dict:
    name = fake.sentence(nb_words=random.randint(1, 5)).rstrip(".")
    authors = ",".join(random.sample(authors_list, k=random.randint(1, 3)))
    genres = ",".join(random.sample(genres_list, k=random.randint(1, 4)))
    year = str(random.randint(1500, 2025))
    width = round(random.uniform(10.0, 200.0), 1)
    height = round(random.uniform(10.0, 200.0), 1)
    book_type = random.choice(["–º—è–≥–∫–∏–π", "—Ç–≤–µ—Ä–¥—ã–π"])
    source = random.choice(["–ø–æ–∫—É–ø–∫–∞", "–ø–æ–¥–∞—Ä–æ–∫", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ"])
    # date_added
    start_date = datetime(int(year), 1, 1)
    date_added = str(
        fake.date_between(start_date=start_date, end_date="today").strftime("%d-%m-%Y")
    )
    while True:
        try:
            validate_date_added(date_added, year)
            break
        except ValueError:
            date_added = str(
                fake.date_between(start_date=start_date, end_date="today").strftime(
                    "%d-%m-%Y"
                )
            )
    # date_read
    date_added_dt = datetime.strptime(date_added, "%d-%m-%Y")
    date_read = str(
        fake.date_between(start_date=date_added_dt, end_date="today").strftime(
            "%d-%m-%Y"
        )
    )
    while True:
        try:
            validate_date_read(date_read, date_added)
            break
        except ValueError:
            date_read = str(
                fake.date_between(start_date=date_added_dt, end_date="today").strftime(
                    "%d-%m-%Y"
                )
            )
    # rating
    rating_value = random.randint(1, 10)
    description = fake.sentence(nb_words=random.randint(3, 10), variable_nb_words=True)
    rating = f"{rating_value}/10 - {description}"
    return {
        "name": name,
        "authors": authors,
        "genres": genres,
        "year": year,
        "width": width,
        "height": height,
        "book_type": book_type,
        "source": source,
        "date_added": date_added,
        "date_read": date_read,
        "rating": rating,
    }


def get_next_id() -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID"""
    if not Path(FILENAME).exists():
        return 1

    with open(FILENAME, "r", encoding="utf-8") as file:
        lines = file.readlines()
        if lines:
            last_book = line_to_dict(lines[-1])
            id = int(last_book["id"]) + 1
            return id
    return 1


def is_unique_book(book: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–∏–≥–∏"""
    original_filename = Path(FILENAME)
    with original_filename.open("r") as file:
        for line in file:
            existing_book = line_to_dict(line)
            if (
                existing_book["name"] == book["name"]
                and existing_book["authors"] == book["authors"]
                and existing_book["year"] == book["year"]
                and existing_book["genres"] == book["genres"]
            ):
                return False
    return True


def add_book(book: dict):
    """ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å"""
    create_backup()
    book_id = get_next_id()
    book["id"] = book_id
    try:
        with file_lock(FILENAME):
            if is_unique_book(book):
                with open(FILENAME, ("a")) as file:
                    time.sleep(0.3)
                    file.write(dict_to_line(book) + "\n")
                res = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book['name']} (ID: {book_id})"
                return res
            else:
                res = f"–ö–Ω–∏–≥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {book['name']}, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è {book['authors']}"
                return res
    except TimeoutError:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"


# MULTIPLE BOOKS
def modify_books_file(new_books: List[dict] = None, update=False) -> str:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –§—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–±–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ª–∏–±–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤–æ–æ–±—â–µ.
    """
    res = ""
    temp_filename = Path("temp.txt")
    found = False
    original_filename = Path(FILENAME)
    try:
        with file_lock(original_filename):
            with original_filename.open("r") as file, temp_filename.open("w") as temp_file:
                time.sleep(0.3)
                for line in file:
                    book = line_to_dict(line)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    for new_book in new_books:
                        if book["id"] == new_book["id"]:
                            found = True

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫–Ω–∏–≥–∏
                            if update:
                                book.update(new_book)
                                temp_file.write(dict_to_line(book) + "\n")
                                res += (
                                    f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book['name']} (ID: {book['id']})\n"
                                )
                                break
                            else:
                                res += f"–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book['name']} (ID: {book['id']})\n"
                                break
                    else:
                        temp_file.write(line)

            if found:
                original_filename.unlink()
                temp_filename.rename(original_filename)
            else:
                temp_filename.unlink()

        return res
    except TimeoutError:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"


def update_books(client_socket, field: str, value: str, new_field, new_value) -> str:
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–µ"""
    books = search_books(field, value)
    for book in books:
        book[new_field] = new_value
    results = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
    results += print_books(books)
    if not books:
        return ""
    client_socket.send(str(results).encode())


    client_socket.send("–û–±–Ω–æ–≤–∏—Ç—å? (–¥/–Ω): ".encode())
    choice = client_socket.recv(1024).decode().strip().lower()
    while choice not in ("–¥", "–Ω", "y", "n"):
        client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n".encode())
        client_socket.send("–û–±–Ω–æ–≤–∏—Ç—å? (–¥/–Ω): ".encode())
        choice = client_socket.recv(1024).decode().strip().lower()
    if choice == "–¥" or choice == "y":
        return modify_books_file(books, True)
    return ""


def delete_books(client_socket, field: str, value: str) -> str:
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Ñ–∞–π–ª—É, –∏—â–µ—Ç –≤ –ø–æ–ª–µ field —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å value.
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–µ–µ –∏ –ø–æ—Å–ª–µ –Ω–µ–µ –≤ —Ñ–∞–π–ª temp.txt,
    –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª home_library.txt –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç temp.txt –≤ home_library.txt.
    """
    books = search_books(field, value)
    results = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
    results += print_books(books)
    client_socket.send(str(results).encode())
    if not books:
        return ""
    client_socket.send("–£–¥–∞–ª–∏—Ç—å? (–¥/–Ω): \n".encode())
    choice = client_socket.recv(1024).decode().strip().lower()
    while choice not in ("–¥", "–Ω", "y", "n"):
        client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n".encode())
        client_socket.send("–£–¥–∞–ª–∏—Ç—å? (–¥/–Ω): ".encode())
        choice = client_socket.recv(1024).decode().strip().lower()
    if choice == "–¥" or choice == "y":
        return modify_books_file(books)
    return ""


def print_all_books():
    """ –í—ã–≤–µ—Å—Ç–∏ –∫–Ω–∏–≥–∏"""
    original_filename = Path(FILENAME)
    res = ""
    with original_filename.open("r") as file:
        for line in file:
            book = line_to_dict(line)
            res += (
                f"ID: {book['id']},\n"
                f"\t–ù–∞–∑–≤–∞–Ω–∏–µ: {book['name']},\n"
                f"\t–ê–≤—Ç–æ—Ä—ã: {book['authors']},\n"
                f"\t–ì–æ–¥: {book['year']},\n"
                f"\t–ñ–∞–Ω—Ä—ã: {book['genres']},\n"
                f"\t–®–∏—Ä–∏–Ω–∞: {book['width']},\n"
                f"\t–í—ã—Å–æ—Ç–∞: {book['height']},\n"
                f"\t–¢–∏–ø –∫–Ω–∏–≥–∏: {book['book_type']},\n"
                f"\t–ò—Å—Ç–æ—á–Ω–∏–∫: {book['source']},\n"
                f"\t–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {book['date_added']},\n"
                f"\t–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {book['date_read']},\n"
                f"\t–†–µ–π—Ç–∏–Ω–≥: {book['rating']}\n"
            )
    return res


def print_books(books: List[dict]) -> str:
    """ –í—ã–≤–µ—Å—Ç–∏ –∫–Ω–∏–≥—É"""
    if not books:
        res = "–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        return res
    res = ""
    res += f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(books)} –∫–Ω–∏–≥(–∏):\n"
    for book in books:
        try:
            res += (
                f"ID: {book['id']},\n"
                + f"\t–ù–∞–∑–≤–∞–Ω–∏–µ: {book['name']},\n"
                + f"\t–ê–≤—Ç–æ—Ä—ã: {book['authors']},\n"
                + f"\t–ì–æ–¥: {book['year']},\n"
                + f"\t–ñ–∞–Ω—Ä—ã: {book['genres']},\n"
                + f"\t–®–∏—Ä–∏–Ω–∞: {book['width']},\n"
                + f"\t–í—ã—Å–æ—Ç–∞: {book['height']},\n"
                + f"\t–¢–∏–ø –∫–Ω–∏–≥–∏: {book['book_type']},\n"
                + f"\t–ò—Å—Ç–æ—á–Ω–∏–∫: {book['source']},\n"
                + f"\t–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {book['date_added']},\n"
                + f"\t–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {book['date_read']},\n"
                + f"\t–†–µ–π—Ç–∏–Ω–≥: {book['rating']}\n"
            )
        except KeyError:
            res += (f"\t–ù–∞–∑–≤–∞–Ω–∏–µ: {book['name']},\n"
                + f"\t–ê–≤—Ç–æ—Ä—ã: {book['authors']},\n"
                + f"\t–ì–æ–¥: {book['year']},\n"
                + f"\t–ñ–∞–Ω—Ä—ã: {book['genres']},\n"
                + f"\t–®–∏—Ä–∏–Ω–∞: {book['width']},\n"
                + f"\t–í—ã—Å–æ—Ç–∞: {book['height']},\n"
                + f"\t–¢–∏–ø –∫–Ω–∏–≥–∏: {book['book_type']},\n"
                + f"\t–ò—Å—Ç–æ—á–Ω–∏–∫: {book['source']},\n"
                + f"\t–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {book['date_added']},\n"
                + f"\t–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {book['date_read']},\n"
                + f"\t–†–µ–π—Ç–∏–Ω–≥: {book['rating']}\n"
            )

    return res


def search_books(field: str, value: str) -> List[dict]:
    """
    –ò—â–µ—Ç –≤ –ø–æ–ª–µ field —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è c value, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∫–Ω–∏–≥
    """
    result = []
    with open(FILENAME, "r") as file:
        for line in file:
            book = line_to_dict(line)
            value_book = book[field]
            if field in ["year", "width", "height"]:
                if book[field] == value:
                    result.append(book)
            elif field == "id":
                if book[field] == value:
                    return [book]
            else:
                if str(value).lower() in value_book.lower():
                    result.append(book)
                    
    return result


def display_menu():
    return (
        "\n--- –ú–µ–Ω—é –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏\n"
        "3. –ò—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏\n"
        "4. –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "5. –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "6. –í—ã—Ö–æ–¥\n"
    )


def display_add_menu():
    return (
        "\n--- –ú–µ–Ω—é –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---\n"
        "1.1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É\n"
        "1.2. –í–≤–µ—Å—Ç–∏ –∫–Ω–∏–≥—É –≤—Ä—É—á–Ω—É—é\n"
        "1.3. –í—ã—Ö–æ–¥\n"
    )

authors_list = list(authors_set())


def handle_client(client_socket, addr):
    """ –ú–µ–Ω—é –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥"""
    try:
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç {addr}")
        client_socket.sendall(library.encode())
        client_socket.sendall("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!\n".encode())
        while True:
            client_socket.send(display_menu().encode())
            choice = client_socket.recv(1024).decode().strip()

            if choice == "1":
                while True:
                    client_socket.send(display_add_menu().encode())
                    choice_add = client_socket.recv(1024).decode().strip()
                    if choice_add == "1.1" or choice_add == "1" or choice_add == "1.1.":
                        book = generate_valid_book(authors_list, genres_list)
                        client_socket.send(print_books([book]).encode())
                        client_socket.send("–î–æ–±–∞–≤–∏—Ç—å? (–¥/–Ω): \n".encode())
                        choice = client_socket.recv(1024).decode().strip().lower()
                        while choice not in ("–¥", "–Ω", "y", "n"):
                            client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n".encode())
                            client_socket.send("–î–æ–±–∞–≤–∏—Ç—å? (–¥/–Ω): \n".encode())
                            choice = client_socket.recv(1024).decode().strip()
                        if choice == "–¥" or choice == "y":
                            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ {book['name']} –Ω–∞—á–∞—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                            response = add_book(book)
                            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ {book['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                            client_socket.send(response.encode())
                            break
                    elif choice_add == "1.2" or choice_add == "2" or choice_add == "1.2.":
                        while True:
                            try:
                                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ".encode())
                                name = client_socket.recv(1024).decode().strip()
                                validate_regex("name", name)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # authors
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".encode()
                                )
                                authors = client_socket.recv(1024).decode().strip()
                                validate_regex("authors", authors)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # genres
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".encode()
                                )
                                genres = client_socket.recv(1024).decode().strip()
                                validate_regex("genres", genres)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # year
                        while True:
                            try:
                                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è: ".encode())
                                year = client_socket.recv(1024).decode().strip()
                                validate_year(year)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # width
                        while True:
                            try:
                                client_socket.send("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–Ω–∏–≥–∏ (–º–º): ".encode())
                                width = client_socket.recv(1024).decode().strip()
                                validate_width(width)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # height
                        while True:
                            try:
                                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–Ω–∏–≥–∏ (–º–º): ".encode())
                                height = client_socket.recv(1024).decode().strip()
                                validate_height(height)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # book_type
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ–±–ª–æ–∂–∫–∏ (–º—è–≥–∫–∏–π/—Ç–≤–µ—Ä–¥—ã–π): ".encode()
                                )
                                book_type = client_socket.recv(1024).decode().strip()
                                validate_regex("book_type", book_type)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # source
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø–æ–∫—É–ø–∫–∞/–ø–æ–¥–∞—Ä–æ–∫/–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ): ".encode()
                                )
                                source = client_socket.recv(1024).decode().strip()
                                validate_regex("source", source)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # date_added
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (DD-MM-YYYY): ".encode()
                                )
                                date_added = client_socket.recv(1024).decode().strip()
                                validate_date_added(date_added, year)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # date_read
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è (DD-MM-YYYY): ".encode()
                                )
                                date_read = client_socket.recv(1024).decode().strip()
                                validate_date_read(date_read, date_added)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        # rating
                        while True:
                            try:
                                client_socket.send(
                                    "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (X/10) - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ".encode()
                                )
                                rating = client_socket.recv(1024).decode().strip()
                                validate_regex("rating", rating)
                                break
                            except ValueError as error:
                                client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                        book = {
                            "name": name,
                            "authors": authors,
                            "genres": genres,
                            "year": year,
                            "width": width,
                            "height": height,
                            "book_type": book_type,
                            "source": source,
                            "date_added": date_added,
                            "date_read": date_read,
                            "rating": rating,
                        }
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ {book['name']} –Ω–∞—á–∞—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                        response = add_book(book)
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ {book['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                        client_socket.send(response.encode())
                        break
                    elif choice_add == "1.3" or choice_add == "3" or choice_add == "1.3.":
                        break
                    else:
                        client_socket.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.".encode())

            elif choice == "2":
                logging.info("–í—ã–≤–æ–¥ –∫–Ω–∏–≥ –Ω–∞—á–∞—Ç")
                response = print_all_books()
                logging.info("–í—ã–≤–æ–¥ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                client_socket.send(response.encode())

            elif choice == "3":
                client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                )
                search_field = client_socket.recv(1024).decode().strip().lower()
                while search_field not in HEADERS:
                    client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n".encode())
                    client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                    )
                    search_field = client_socket.recv(1024).decode().strip().lower()
                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ".encode())
                search_value = client_socket.recv(1024).decode().strip().lower()
                logging.info("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –Ω–∞—á–∞—Ç")
                results = print_books(search_books(search_field, search_value))
                logging.info("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                client_socket.send(str(results).encode())

            elif choice == "4":
                client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                )
                search_field = client_socket.recv(1024).decode().strip().lower()
                while search_field not in HEADERS:
                    client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n".encode())
                    client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                    )
                    search_field = client_socket.recv(1024).decode().strip().lower()
                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ".encode())
                search_value = client_socket.recv(1024).decode().strip().lower()
                client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                )
                update_field = client_socket.recv(1024).decode().strip()
                while update_field not in HEADERS:
                    client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n".encode())
                    client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                    )
                    update_field = client_socket.recv(1024).decode().strip().lower()
                if update_field == "name":
                    while True:
                        try:
                            client_socket.send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ".encode())
                            name = client_socket.recv(1024).decode().strip()
                            validate_regex("name", name)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, name
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "authors":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".encode()
                            )
                            authors = client_socket.recv(1024).decode().strip()
                            validate_regex("authors", authors)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, authors
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "genres":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".encode()
                            )
                            genres = client_socket.recv(1024).decode().strip()
                            validate_regex("genres", genres)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, genres
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "year":
                    while True:
                        try:
                            client_socket.send("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è: ".encode())
                            year = client_socket.recv(1024).decode().strip()
                            validate_year(year)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, year
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "width":
                    while True:
                        try:
                            client_socket.send("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–Ω–∏–≥–∏ (–º–º): ".encode())
                            width = client_socket.recv(1024).decode().strip()
                            validate_width(width)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, width
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "height":
                    while True:
                        try:
                            client_socket.send("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–Ω–∏–≥–∏ (–º–º): ".encode())
                            height = client_socket.recv(1024).decode().strip()
                            validate_height(height)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, height
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "book_type":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ–±–ª–æ–∂–∫–∏ (–º—è–≥–∫–∏–π/—Ç–≤–µ—Ä–¥—ã–π): ".encode()
                            )
                            book_type = client_socket.recv(1024).decode().strip()
                            validate_regex("book_type", book_type)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, book_type
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "source":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø–æ–∫—É–ø–∫–∞/–ø–æ–¥–∞—Ä–æ–∫/–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ): ".encode()
                            )
                            source = client_socket.recv(1024).decode().strip()
                            validate_regex("source", source)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, source
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "date_added":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (DD-MM-YYYY): ".encode()
                            )
                            date_added = client_socket.recv(1024).decode().strip()
                            validate_date_added(date_added, year)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, date_added
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "date_read":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è (DD-MM-YYYY): ".encode()
                            )
                            date_read = client_socket.recv(1024).decode().strip()
                            validate_date_read(date_read, date_added)
                            response = update_books(
                                client_socket, search_field, search_value, update_field, date_read
                            )
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())
                elif update_field == "rating":
                    while True:
                        try:
                            client_socket.send(
                                "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (X/10) - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ".encode()
                            )
                            rating = client_socket.recv(1024).decode().strip()
                            validate_regex("rating", rating)
                            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –Ω–∞—á–∞—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                            response = update_books(
                                client_socket, search_field, search_value, update_field, rating
                            )
                            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                            client_socket.send(response.encode())
                            break
                        except ValueError as error:
                            client_socket.send(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {error}\n".encode())

            elif choice == "5":
                client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                )
                search_field = client_socket.recv(1024).decode().strip().lower()
                while search_field not in HEADERS:
                    client_socket.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n".encode())
                    client_socket.send(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (id/name/authors/genres/year/width/height/book_type/source/date_added/date_read/rating): ".encode()
                    )
                    search_field = client_socket.recv(1024).decode().strip().lower()
                client_socket.send("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ".encode())
                search_value = client_socket.recv(1024).decode().strip().lower()
                logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –Ω–∞—á–∞—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                response = delete_books(client_socket, search_field, search_value)
                logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                client_socket.send(response.encode())

            elif choice == "6":
                client_socket.send("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.".encode())
                break

            else:
                client_socket.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.".encode())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {addr}: {e}")
    finally:
        client_socket.close()
        print(f"–ö–ª–∏–µ–Ω—Ç {addr} –æ—Ç–∫–ª—é—á–µ–Ω")


def start_server(host="127.0.0.1", port=9999):
    lock_files = list(Path().glob("*.lock"))

    if not lock_files:
        logging.info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    else:
        for lock_file in lock_files:
            lock_file.unlink()
        print(f"–£–¥–∞–ª–µ–Ω–æ {len(lock_files)} —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(10)
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")

    while True:
        client_socket, addr = server.accept()
        client_thread = threading.Thread(
            target=handle_client,
            args=(client_socket, addr),
            daemon=True
        )
        client_thread.start()


if __name__ == "__main__":
    start_server()
